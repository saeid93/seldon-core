// Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package nvidia.inferenceserver;

//@@.. cpp:namespace:: nvidia::inferenceserver

//@@.. cpp:var:: message SharedMemoryRegion
//@@
//@@   The meta-data for the shared memory region registered in the inference
//@@   server.
//@@
message SharedMemoryRegion
{
  //@@
  //@@  .. cpp:var:: string name
  //@@
  //@@     The name for this shared memory region.
  //@@
  string name = 1;

  message SystemSharedMemory
  {
    //@@  .. cpp:var:: string shared_memory_key
    //@@
    //@@     The name of the shared memory region that holds the input data
    //@@     (or where the output data should be written).
    //@@
    string shared_memory_key = 1;

    //@@  .. cpp:var:: uint64 offset
    //@@
    //@@     This is the offset of the shared memory block from the start
    //@@     of the shared memory region.
    //@@     start = offset, end = offset + byte_size;
    //@@
    uint64 offset = 2;
  }

  message CudaSharedMemory
  {
    //@@  .. cpp:var:: int64 device_id
    //@@
    //@@     The GPU device ID on which the cudaIPC handle was created.
    //@@
    int64 device_id = 1;
  }

  //@@  .. cpp:var:: oneof shared_memory_types
  //@@
  //@@     Types of shared memory identifiers
  //@@
  oneof shared_memory_types
  {
    //@@
    //@@  .. cpp:var:: SystemSharedMemory system_shared_memory
    //@@
    //@@     The status of this system shared memory region.
    //@@
    SystemSharedMemory system_shared_memory = 2;

    //@@
    //@@  .. cpp:var:: CudaSharedMemory cuda_shared_memory
    //@@
    //@@     The status of this CUDA shared memory region.
    //@@
    CudaSharedMemory cuda_shared_memory = 3;
  }


  //@@  .. cpp:var:: uint64 byte_size
  //@@
  //@@     Size of the shared memory block, in bytes.
  //@@
  uint64 byte_size = 5;
}

//@@
//@@.. cpp:var:: message SharedMemoryStatus
//@@
//@@   Shared memory status for the inference server.
//@@
message SharedMemoryStatus
{
  //@@
  //@@  .. cpp:var:: SharedMemoryRegion shared_memory_region (repeated)
  //@@
  //@@     The list of active/registered shared memory regions.
  //@@
  repeated SharedMemoryRegion shared_memory_region = 2;
}
